{"version":3,"sources":["components/Timer/TimerControls/TimerControls.module.scss","components/NavBar/Logo/Logo.module.css","components/NavBar/NavBar.module.css","components/NavBar/NavLinks/NavLinks.module.css","components/Timer/Timer.module.css","components/Timer/TimerMode/TimerMode.module.css","components/NavBar/Logo/Logo.jsx","components/NavBar/NavLinks/NavLinks.jsx","components/NavBar/NavBar.jsx","store/AppContext.js","components/Timer/TimerClock/TimerClock.jsx","components/Timer/TimerControls/TimerControls.jsx","components/Timer/TimerMode/TimerMode.jsx","components/Timer/Timer.jsx","App.js","index.js"],"names":["module","exports","Logo","className","styles","logo","NavLinks","linkGroup","href","NavBar","container","AppContext","React","createContext","mode","updateMode","timerStarted","setTimerStarted","seconds","AppContextProvider","props","useState","setMode","setSeconds","timerId","setTimerId","appColor","setAppColor","stopTimer","clearInterval","newMode","newSeconds","updatedAppColor","window","confirm","AppContextValue","controls","toggleTimer","newTimerId","setInterval","prevVal","startTimer","endTimer","Provider","value","children","TimerClock","time","secs","minutes","Math","floor","convertSeconds","useContext","TimerControls","startButton","onClick","pauseEndButton","pauseEndButtons","timerControls","TimerMode","clickHandler","e","target","Timer","App","color","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af7bdd9c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"startButton\":\"TimerControls_startButton__3J-8U\",\"pauseEndButtons\":\"TimerControls_pauseEndButtons__1rx18\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Logo_logo__2Zh3P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NavBar_container__1BPya\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"linkGroup\":\"NavLinks_linkGroup__2dKpg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Timer_container__2C-OQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TimerMode_container__3q-yF\"};","import styles from './Logo.module.css'\r\n\r\nexport default function Logo () {\r\n    return(<h1 className={styles.logo}>Neon Pomo</h1>)\r\n}","import styles from \"./NavLinks.module.css\";\r\n\r\nexport default function NavLinks() {\r\n  return (\r\n    <div className={styles.linkGroup}>\r\n      <a href=\"/github\">Git Hub</a>\r\n      <a href=\"/Homepage\">HomePage</a>\r\n    </div>\r\n  );\r\n}\r\n","import { Fragment } from \"react\";\r\nimport Logo from \"./Logo/Logo\";\r\nimport styles from \"./NavBar.module.css\";\r\nimport NavLinks from \"./NavLinks/NavLinks\";\r\n\r\nexport default function NavBar() {\r\n  return (\r\n    <Fragment>\r\n      <div className={styles.container}>\r\n        <Logo />\r\n        <NavLinks />\r\n      </div>\r\n      <hr />\r\n    </Fragment>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nconst AppContext = React.createContext({\r\n  mode: \"\",\r\n  updateMode: () => {},\r\n  timerStarted: \"\",\r\n  setTimerStarted: () => {},\r\n  seconds: 0,\r\n});\r\n\r\nexport const AppContextProvider = (props) => {\r\n  const INITIAL_MODE = \"pomodoro\";\r\n  const INITIAL_SECONDS = 1500;\r\n  const INITIAL_APP_COLOR = \"primary-color\";\r\n\r\n  const [mode, setMode] = useState(INITIAL_MODE);\r\n  const [timerStarted, setTimerStarted] = useState(false);\r\n  const [seconds, setSeconds] = useState(INITIAL_SECONDS);\r\n  const [timerId, setTimerId] = useState(null);\r\n  const [appColor, setAppColor] = useState(INITIAL_APP_COLOR);\r\n\r\n  const startTimer = () => {\r\n    let newTimerId = setInterval(() => {\r\n      setSeconds((prevVal) => prevVal - 1);\r\n    }, 1000);\r\n    setTimerId(newTimerId);\r\n  };\r\n\r\n  const stopTimer = () => {\r\n    clearInterval(timerId);\r\n    setTimerStarted(false);\r\n  };\r\n\r\n  const updateMode = (newMode) => {\r\n    if (timerStarted) {\r\n      const updateAlert = window.confirm(\r\n        \"Changing modes will reset clock. Do you still want to continue?\"\r\n      );\r\n\r\n      if (updateAlert === false) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    stopTimer();\r\n\r\n    let newSeconds;\r\n    let updatedAppColor;\r\n\r\n    if (newMode === \"pomodoro\") {\r\n      newSeconds = 1500;\r\n      updatedAppColor = \"primary-color\";\r\n    } else if (newMode === \"shortBreak\") {\r\n      newSeconds = 300;\r\n      updatedAppColor = \"secondary-color\";\r\n    } else {\r\n      newSeconds = 900;\r\n      updatedAppColor = \"tertiary-color\";\r\n    }\r\n\r\n    setMode(newMode);\r\n    setSeconds(newSeconds);\r\n    setAppColor(updatedAppColor);\r\n    setTimerStarted(false);\r\n  };\r\n\r\n  const toggleTimer = () => {\r\n    if (!timerStarted) {\r\n      startTimer();\r\n    } else {\r\n      stopTimer();\r\n    }\r\n    setTimerStarted((prevVal) => !prevVal);\r\n  };\r\n\r\n  const endTimer = () => {\r\n    const endAlert = window.confirm(\r\n      \"Are you sure you want to finish the round early?\"\r\n    );\r\n\r\n    if (endAlert) {\r\n      stopTimer();\r\n      if (mode === \"pomodoro\") {\r\n        updateMode(\"shortBreak\");\r\n      } else {\r\n        updateMode(\"pomodoro\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const AppContextValue = {\r\n    mode,\r\n    updateMode,\r\n    timerStarted,\r\n    setTimerStarted,\r\n    seconds,\r\n    setSeconds,\r\n    appColor,\r\n    controls: {\r\n      toggleTimer,\r\n      endTimer,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider value={AppContextValue}>\r\n      {props.children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AppContext;\r\n","import { useContext } from \"react\";\r\nimport AppContext from \"../../../store/AppContext\";\r\nimport \"./TimerClock.module.css\";\r\n\r\nexport default function TimerClock() {\r\n  const { seconds } = useContext(AppContext);\r\n\r\n  const convertSeconds = (secs) => {\r\n    let minutes = Math.floor(secs / 60);\r\n    let seconds = secs % 60;\r\n\r\n    if (seconds < 10) {\r\n      seconds = `0${seconds}`;\r\n    }\r\n    return `${minutes}:${seconds}`;\r\n  };\r\n\r\n  let time = convertSeconds(seconds);\r\n\r\n  return <p>{time}</p>;\r\n}\r\n","import { useContext } from \"react\";\r\nimport AppContext from \"../../../store/AppContext\";\r\nimport styles from \"./TimerControls.module.scss\";\r\n\r\nexport default function TimerControls() {\r\n  const { controls, timerStarted } =\r\n    useContext(AppContext);\r\n\r\n  const startButton = (\r\n    <button onClick={controls.toggleTimer} className={styles.startButton}>\r\n      Start\r\n    </button>\r\n  );\r\n\r\n  const pauseEndButton = (\r\n    <div className={styles.pauseEndButtons}>\r\n      <button onClick={controls.toggleTimer}>Pause</button>\r\n      <button onClick={controls.endTimer}>End</button>\r\n    </div>\r\n  );\r\n\r\n  const timerControls = timerStarted ? pauseEndButton : startButton;\r\n\r\n  return <div>{timerControls}</div>;\r\n}\r\n","import { useContext } from \"react\";\r\nimport AppContext from \"../../../store/AppContext\";\r\n\r\nimport styles from \"./TimerMode.module.css\";\r\n\r\nexport default function TimerMode() {\r\n  const { mode, updateMode } = useContext(AppContext);\r\n\r\n  function clickHandler(e) {\r\n    const newMode = e.target.value;\r\n    updateMode(newMode);\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <button\r\n        className={mode === \"pomodoro\" ? 'active' : null}\r\n        onClick={clickHandler}\r\n        value=\"pomodoro\"\r\n      >\r\n        Pomodoro\r\n      </button>\r\n      <button\r\n        className={mode === \"shortBreak\" ? 'active' : null}\r\n        onClick={clickHandler}\r\n        value=\"shortBreak\"\r\n      >\r\n        Short Break\r\n      </button>\r\n      <button\r\n        className={mode === \"LongBreak\" ? 'active' : null}\r\n        onClick={clickHandler}\r\n        value=\"LongBreak\"\r\n      >\r\n        Long Break\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import styles from \"./Timer.module.css\";\r\nimport TimerClock from \"./TimerClock/TimerClock\";\r\nimport TImerControls from \"./TimerControls/TimerControls\";\r\nimport TimerMode from \"./TimerMode/TimerMode\";\r\n\r\nexport default function Timer() {\r\n  return (\r\n    <div className={styles.container}>\r\n      <TimerMode />\r\n      <TimerClock />\r\n      <TImerControls />\r\n    </div>\r\n  );\r\n}\r\n","import { useContext } from \"react\";\r\nimport \"./App.scss\";\r\nimport NavBar from \"./components/NavBar/NavBar\";\r\nimport Timer from \"./components/Timer/Timer\";\r\nimport AppContext from \"./store/AppContext\";\r\n\r\nexport default function App() {\r\n\r\n  const { appColor } = useContext(AppContext)\r\n\r\n  let color = `container ${appColor}`\r\n\r\n  console.log(color)\r\n\r\n  return (\r\n    <div className={color}>\r\n      <NavBar />\r\n      <Timer />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { AppContextProvider } from \"./store/AppContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContextProvider>\n      <App />\n    </AppContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}